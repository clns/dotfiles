#!/usr/bin/env bash

if [ "x$0" = "xbash" ]; then
  # run as curl | bash
  # on some systems, you can just do cat>npm-install.sh
  # which is a bit cuter.  But on others, &1 is already closed,
  # so catting to another script file won't do anything.
  # Follow Location: headers, and fail on errors
  curl -f -L -s \
    https://raw.githubusercontent.com/clns/dotfiles/master/bin/dotfiles \
    > "dotfiles-install-$$"
  ret=$?
  if [ $ret -eq 0 ]; then
    (exit 0)
  else
    rm "dotfiles-install-$$"
    echo "Failed to download script" >&2
    exit $ret
  fi
  bash "dotfiles-install-$$"
  ret=$?
  rm "dotfiles-install-$$"
  exit $ret
fi

if [ -z "$DOTFILES" ]; then
    DOTFILES=$HOME/.dotfiles
fi

#
# Handle help
#
help() {
cat <<HELP
Usage:
 $(basename "$0") [options] <command> [...args]

Commands:
 help         Open README in browser if no args are given;
              possible args (optional): hub
 link         Symlink all the files from ~/.dotfiles/link/ into ~/, backing
              up original files in ~/.dotfiles/backups/, if any
 copy         Copy all the files from ~/.dotfiles/copy/ into ~/, backing
              up original files in ~/.dotfiles/backups/, if any
 bashit       Install and configure bash it
 update       Update the dotfiles repo
 install      Install stuff from ~/.dotfiles/install/
 hub-as-git   Set to 'off' to disable aliasing 'hub' as 'git'; default is 'on'

Options:
 -h  Display this info
 -u  ? Upgrade installed packages (for more details search for has_flag '-u'\n
     in the repo to see who implements this)
 -q  ? Quick mode on - skip some time consuming operations like 'brew update'\n
     (for more details search for has_flag '-q' in the repo to see who implements this)
 -y  Answer YES to all questions

Notes:
 After some commands like 'link' or 'bashit' you may need to source the
 '.bashrc' file so the changes take effect using \`. ~/.bashrc\` or \`reload\`

HELP
}

yes=
while getopts "hy" opt; do
    case $opt in
        h) help ; exit 0 ;;
        y) yes="yes" ;;
        \?) help >&2 ; exit 1 ;;
    esac
done
shift $((OPTIND-1))

#
# Functions
#

# Copy files.
copy_header() { echo "== Copying files into home directory =="; }
copy_test() {
    if [ -e "$2" ] && [ ! "$(cmp "$1" "$2" 2> /dev/null)" ]; then
        echo "same file"
    elif [ "$1" -ot "$2" ]; then
        echo "destination file newer"
    fi
    return 0
}
copy_do() {
    echo "Copying $HOME/$1."
    cp "$2" $HOME/
}
copy_postprocess() {
    if [ "$(basename $1)" = ".gitconfig" ]; then
        if [ "$git_email" ]; then
            sed -i -e "s/{EMAIL}/$git_email/" $1
        elif [ "$yes" ]; then
            printf "\033[1;33mDon't forget to set the git email address using \
\`git config --global user.email <email>\`\033[0m\n"
        else
            printf "\033[0;36mEnter the email address to use in ~/.gitconfig:\033[0m\n"
            read REPLY
            sed -i -e "s/{EMAIL}/$REPLY/" $1
        fi
    fi
}

# Link files.
link_header() { echo "== Linking files into home directory =="; }
link_test() {
    [ "$1" -ef "$2" ] && echo "same file"
    return 0
}
link_do() {
    echo "Linking $HOME/$1"
    ln -sf ${2#$HOME/} $HOME/
}

# Process files
processDir() {
    local base; local ext; local dest; local skip
    local path="$DOTFILES/$1"
    # Run _header function only if declared
    [ $(command -v "$1_header") ] && $1_header
    # Portable file looping (without the 'shopt' bashism)
    # http://www.dwheeler.com/essays/filenames-in-shell.html#summary
    for file in $path/* $path/.[!.]*; do
        [ -e "$file" ] || continue # Make sure it isn't an empty match
        base="$(basename $file)"
        ext="${file##*.}"
        if [ "$ext" = "swp" ]; then
            continue # skip Vim swap files
        fi
        dest="$HOME/$base"
        # Run _test function only if declared
        if [ $(command -v "$1_test") ]; then
            # If _test function returns a string, skip file and print that message.
            skip="$("$1_test" "$file" "$dest")"
            if [ "$skip" ]; then
                echo "Skipping $dest, $skip"
                continue
            fi
            # If destination file already exists, back it up.
            if [ -e "$dest" ]; then
                # Set backup flag so we can print a message at the end
                backup=1
                # Create backup dir if doesn't already exist
                [ -e $backup_dir ] || mkdir -p $backup_dir
                # Backup file / link / whatever
                mv $dest $backup_dir
            fi
        fi
        # Actually process it
        $1_do $base $file
        # Do any post-processing
        [ $(command -v "$1_postprocess") ] && $1_postprocess $dest
    done
    return 0
}

bashIt() {
    [ -z "$BASH_VERSION" ] &&
        echo "Bash it can only run in a bash shell" >&2 && exit 1

    local dir=$DOTFILES/link/.bash_it
    if [ ! -d "$dir" ]; then
        git submodule update --init --depth 1 $dir
    fi
    if [ -z "$BASH_IT" ]; then
        BASH_IT=$HOME/$(basename $dir)
    fi
    if [ ! -e "$BASH_IT" ]; then
        ln -s $dir $BASH_IT
    fi
    . "$DOTFILES/link/.bashrc"

    # Enable bash it stuff
    bash-it enable alias general
    bash-it enable alias git
    bash-it enable completion bash-it
    bash-it enable completion brew
    # TODO: enable the 'hub' completion when bash it decides to
    # include it instead of 'gh'
    local path="$BASH_IT/custom/hub.completion.bash"
    if [ ! -e $path ]; then
        curl "https://raw.githubusercontent.com/github/hub/master/etc/hub.bash_completion.sh" \
            -o "$path" --silent --location
    fi
    bash-it enable completion git
    bash-it enable completion git_flow
    bash-it enable completion gulp
    bash-it enable completion ssh
    bash-it enable completion vagrant
}

#
# Do some stuff
#

# If git is not installed, install it (Ubuntu only since OS X has it installed by default)
if [ ! $(command -v "git") ] && [ $(command -v "apt-get") ]; then
    sudo add-apt-repository -y ppa:git-core/ppa # Git repository
    sudo apt-get update
    sudo apt-get install -y git
fi

# Clone the repo if doesn't exist
if [ ! -d $DOTFILES ]; then
    git clone https://github.com/clns/dotfiles $DOTFILES
fi
cd $DOTFILES

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

case "$1" in
    help)
        case "$2" in
            hub)
                open https://github.com/github/hub#commands ; exit 0 ;;
            *)
                open https://github.com/clns/dotfiles/blob/master/README.md ; exit 0 ;;
        esac
        ;;
    link)
        processDir "link"
        ;;
    copy)
        git_email="$(git config --global user.email)"
        processDir "copy"
        ;;
    bashit)
        bashIt
        ;;
    install)
        ./install/$2.sh
        ;;
    update)
        git stash && git pull --rebase && git stash pop
        ;;
    hub-as-git)
        backup_file() {
            if [ "$2" = "off" ] && [ -e "$1" ] && [ ! -e "$1.bak" ]; then
                mv "$1" "$1.bak"
            elif [ -e "$1.bak" ] && [ ! -e "$1" ]; then
                mv "$1.bak" "$1"
            fi
        }
        backup_file "$DOTFILES/source/hub-as-git.sh" "$2"
        ;;
    "")
        # If no command was used (eg. the first run from GitHub)
        help
        ;;
    *)
        help >&2 ; exit 1
        ;;
esac

# Alert if backups were made.
if [ "$backup" ]; then
    echo "Backups were moved to $HOME/${backup_dir#$HOME/}"
fi

exit 0
