#!/usr/bin/env bash

script_name=dotfiles
script_tmp=dotfiles-install-$$

if [ "x$0" = "xsh" ]; then
  # run as curl | sh
  # on some systems, you can just do cat>npm-install.sh
  # which is a bit cuter.  But on others, &1 is already closed,
  # so catting to another script file won't do anything.
  # Follow Location: headers, and fail on errors
  curl -f -L -s \
    https://raw.githubusercontent.com/clns/dotfiles/master/bin/$script_name \
    > $script_tmp
  ret=$?
  if [ $ret -eq 0 ]; then
    (exit 0)
  else
    rm $script_tmp
    echo "Failed to download script" >&2
    exit $ret
  fi
  sh $script_tmp
  ret=$?
  rm $script_tmp
  exit $ret
fi

if [ -z "$DOTFILES" ]; then
    DOTFILES=$HOME/.dotfiles
fi

#
# Handle help
#
OPTIONS=(
"-h" "Display this info"
"-u" "Upgrade installed packages (for more details search for has_flag '-u'\n
\tin the repo to see who implements this)"
"-q" "Quick mode on - skip some time consuming operations like 'brew update'\n
\t(for more details search for has_flag '-q' in the repo to see who implements this)"
"-y" "Answer YES to all questions"
)
installs=()
if [ -d $DOTFILES ]; then
    for inst in $DOTFILES/install/*; do
        inst=$(basename "$inst"); installs+=("${inst%.*}")
    done
fi
function help() {
cat <<HELP
Usage: $(basename "$0") [options] <command> [...args]

Commands:
 help      Open README in browser
 link      This will symlink all the files from $DOTFILES/link/ into ~/,
           only if files have changed
 bashit    Install and configure Bash it
 copy      This will copy all the files from $DOTFILES/copy/ into ~/,
           only if files have changed
 install   This will install all the things from $DOTFILES/install/;
           to prevent installing everything, specify arguments;
           possible args: $(echo "${installs[@]}")

Options:
 -h  Display this info
 -u  ?
 -q  ?
 -y  Answer YES to all questions

HELP
}

yes=
while getopts "hy" opt; do
    case $opt in
        h) help ; exit 0 ;;
        y) yes="yes" ;;
        \?) help >&2 ; exit 1 ;;
    esac
done
shift $((OPTIND-1))

#
# Functions
#

function is_ubuntu() {
    [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}

# Copy files.
function copy_header() { echo -e "\033[1m== Copying files into home directory ==\033[0m"; }
function copy_test() {
    if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
        echo "same file"
    elif [[ "$1" -ot "$2" ]]; then
        echo "destination file newer"
    fi
    return 0
}
function copy_do() {
    echo "Copying ~/$1."
    cp "$2" ~/
}
function copy_postprocess() {
    if [[ $(basename $1) == ".gitconfig" ]]; then
        if [ "$git_email" ]; then
            sed -i -e "s/{EMAIL}/$git_email/" $1
        elif [ "$yes" ]; then
            echo -e "\033[0;33mDon't forget to set the git email address using
            \`git config --global user.email \`\033[0m"
        else
            echo -e "\033[0;34mEnter the email address to use in ~/.gitconfig:\033[0m"
            read -p ""
            sed -i -e "s/{EMAIL}/$REPLY/" $1
        fi
    fi
}

# Link files.
function link_header() { echo -e "\033[1m== Linking files into home directory ==\033[0m"; }
function link_test() {
    [[ "$1" -ef "$2" ]] && echo "same file"
    return 0
}
function link_do() {
    echo "Linking ~/$1"
    ln -sf ${2#$HOME/} ~/
}

# Process files
function processDir() {
    local base ext dest skip
    local files=($DOTFILES/$1/*)
    # No files? abort.
    if (( ${#files[@]} == 0 )); then return; fi
    # Run _header function only if declared
    [[ $(declare -f $1_header) ]] && $1_header
    for file in "${files[@]}"; do
        base="$(basename $file)"
        ext="${file##*.}"
        if [[ $ext == 'swp' ]]; then
            continue # skip Vim swap files
        fi
        dest="$HOME/$base"
        # Run _test function only if declared
        if [[ $(declare -f "$1_test") ]]; then
            # If _test function returns a string, skip file and print that message.
            skip="$("$1_test" "$file" "$dest")"
            if [[ "$skip" ]]; then
                echo "Skipping $dest, $skip"
                continue
            fi
            # If destination file already exists, back it up.
            if [[ -e "$dest" ]]; then
                # Set backup flag so we can print a message at the end
                backup=1
                # Create backup dir if doesn't already exist
                [[ -e $backup_dir ]] || mkdir -p $backup_dir
                # Backup file / link / whatever
                mv $dest $backup_dir
            fi
        fi
        # Actually process it
        $1_do $base $file
        # Do any post-processing
        [[ $(declare -f "$1_postprocess") ]] && $1_postprocess $dest
    done
    return 0
}

function bashIt() {
    local dir=$DOTFILES/link/.bash_it
    if [ ! -d "$dir" ]; then
        git submodule update --init --depth 1 $dir
    fi
    if [ -z "$BASH_IT" ]; then
        BASH_IT=$HOME/$(basename $dir)
    fi
    if [ ! -e "$BASH_IT" ]; then
        ln -s $dir $BASH_IT
    fi
    source "$DOTFILES/link/.bashrc"

    # Enable bash it stuff
    bash-it enable alias general
    bash-it enable alias git
    bash-it enable completion bash-it
    bash-it enable completion brew
    bash-it enable completion gh
    bash-it enable completion git
    bash-it enable completion git_flow
    bash-it enable completion gulp
    bash-it enable completion ssh
    bash-it enable completion vagrant
}

#
# Do some stuff
#

# If git is not installed, install it (Ubuntu only since OS X has it installed by default)
if [ ! $(type -P 'git') ] && is_ubuntu; then
    if ! apt_repository_exists 'git-core/ppa'; then
        sudo add-apt-repository -y ppa:git-core/ppa # Git repository
        sudo apt-get update
    fi
    sudo apt-get install -y git
fi

# Clone the repo if doesn't exist
if [[ ! -d $DOTFILES ]]; then
    git clone https://github.com/clns/dotfiles $DOTFILES
fi
cd $DOTFILES

# Tweak file globbing.
# http://unix.stackexchange.com/a/162589
shopt -s dotglob
shopt -s nullglob

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

case "$1" in
    help)
        open https://github.com/clns/dotfiles/blob/master/README.md ; exit 0
        ;;
    link)
        processDir "link"
        ;;
    copy)
        git_email="$(git config --global user.email)"
        processDir "copy"
        ;;
    bashit)
        bashIt
        ;;
    install)
        echo "not implemented" >&2 ; exit 1
        ;;
    "")
        # If no command was used (eg. the first run from GitHub)
        help
        ;;
    *)
        help >&2 ; exit 1
        ;;
esac

# Alert if backups were made.
if [[ "$backup" ]]; then
    echo "Backups were moved to ~/${backup_dir#$HOME/}"
fi

source "$DOTFILES/link/.bashrc"
