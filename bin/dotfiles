#!/usr/bin/env bash
set -e  # exit on first error

#
# Handle help
#

function help() {
cat <<HELP
Usage: $(basename "$0") [options] <command>

Commands:
  help      Open README in browser
  install   Install everything

Options:
  --fast        Skip some time consuming operations like 'brew update'
  -h, --help    Display this info
  -u, --upgrade Upgrade installed packages (curently only Homebrew, TODO: Ubuntu)

Note: Is recommended to run the command as 'sudo' to allow the scripts
to configure stuff correctly (eg. PostgreSQL will set timezone=UTC).

HELP
exit 0
}

# Check if argument exists in args list.
# Usage:
#
#   if is_arg '--test'; then echo "exits"; fi
#
ARGS=$@
function is_arg() {
    for arg in $ARGS; do
        [[ $arg == $1 ]] && return 0
    done
    return 1
}

# Show help
(is_arg '-h' || is_arg '--help') && help
is_arg 'help' && open https://github.com/clns/dotfiles/blob/master/README.md && exit 0

#
# Functions
#

# Copy files.
function copy_header() { log_header "Copying files into home directory"; }
function copy_test() {
    if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
        echo "same file"
    elif [[ "$1" -ot "$2" ]]; then
        echo "destination file newer"
    fi
    return 0
}
function copy_do() {
    echo "Copying ~/$1."
    cp "$2" ~/
}
function copy_postprocess() {
    if [[ $(basename $1) == ".gitconfig" ]]; then
        log_arrow "Enter the email address to use in ~/.gitconfig:"
        read -p ""
        sed -i -e "s/{EMAIL}/$REPLY/" $1
    fi
}

# Link files.
function link_header() { log_header "Linking files into home directory"; }
function link_test() {
    [[ "$1" -ef "$2" ]] && echo "same file"
    return 0
}
function link_do() {
    echo "Linking ~/$1."
    ln -sf ${2#$HOME/} ~/
}

# Process files
function processDir() {
    local base dest skip
    local files=($DOTFILES/$1/*)
    # No files? abort.
    if (( ${#files[@]} == 0 )); then return; fi
    # Run _header function only if declared
    [[ $(declare -f $1_header) ]] && $1_header
    for file in "${files[@]}"; do
        base="$(basename $file)"
        dest="$HOME/$base"
        # Run _test function only if declared
        if [[ $(declare -f "$1_test") ]]; then
            # If _test function returns a string, skip file and print that message.
            skip="$("$1_test" "$file" "$dest")"
            if [[ "$skip" ]]; then
                echo "Skipping $dest, $skip"
                continue
            fi
            # If destination file already exists, back it up.
            if [[ -e "$dest" ]]; then
                # Set backup flag so we can print a message at the end
                backup=1
                # Create backup dir if doesn't already exist
                [[ -e $backup_dir ]] || mkdir -p $backup_dir
                # Backup file / link / whatever
                mv $dest $backup_dir
            fi
        fi
        # Actually process it
        $1_do $base $file
        # Do any post-processing
        [[ $(declare -f "$1_postprocess") ]] && $1_postprocess $dest
    done
}

#
# Do some stuff
#

DOTFILES=~/.dotfiles

# Source utility functions if doesn't exist
if [[ ! $(type -t 'cmd_exists') ]]; then
    if [[ -f "$DOTFILES/source/01_functions.sh" ]]; then
        source "$DOTFILES/source/01_functions.sh"
    else
        bash -c "$(curl -fsSL 'https://raw.githubusercontent.com/clns/dotfiles/master/source/01_functions.sh')"
    fi
fi

# If git is not installed, install it (Ubuntu only since OS X has it installed by default)
if ! cmd_exists 'git' && is_ubuntu; then
    log_header "Installing git"
    sudo apt-get -qq install git-core
fi

# Clone the repo or update if already cloned
if [[ ! -d $DOTFILES ]]; then
    # $DOTFILES directory doesn't exist, clone it
    git clone --recursive https://github.com/clns/dotfiles $DOTFILES
    cd $DOTFILES
else
    cd $DOTFILES
    if ! is_arg '--fast'; then
        git pull
        git submodule update --init --recursive
    fi
fi

# Stop here if 'install' command wasn't used (eg. the first run from GitHub)
if ! is_arg 'install'; then
    source "link/.bashrc"
    echo "Run 'dotfiles install' to configure everything, or 'dotfiles -h' for help."
    exit 0
fi

# Tweak file globbing.
# http://unix.stackexchange.com/a/162589
shopt -s dotglob
shopt -s nullglob

# If backups are needed, this is where they'll go.
backup_dir="$DOTFILES/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

# Process the files
processDir "copy"
processDir "link"

# Alert if backups were made.
if [[ "$backup" ]]; then
    log_arrow "Backups were moved to ~/${backup_dir#$HOME/}"
fi

# Run installs
requirements=(brew)
development=(node go postgresql macvim vim fonts)
all_instals=("${requirements[*]}" "${development[*]}")
for install in ${all_instals[@]}; do
    source "install/${install}.sh"
done
for install in $DOTFILES/install/*; do
    filename=$(basename $install)
    name="${filename%.*}" # get the name of the file without extension
    if ! in_array $name ${all_instals[*]}; then
        source $install
    fi
done

source "link/.bashrc"
